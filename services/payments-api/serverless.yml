service: sample-app-ext-payments-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    # sstApp: dev-SampleApp-payments
    tableName: !ImportValue ${self:custom.sstApp}-payments-ExtTableName

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue ${self:custom.sstApp}-payments-ExtTableArn

# Referenciando o API Gateway de SHARED Folder
  apiGateway:
    restApiId:
      Fn::ImportValue: ${self:custom.sstApp}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      Fn::ImportValue: ${self:custom.sstApp}-ExtApiGatewayRestApiRootResourceId
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /payments
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: payments
          method: post
          cors: true
          # Lambda authorizer all the way
          # authorizer: aws_iam
          authorizer: 
            type: CUSTOM
            authorizerId: !ImportValue ${self:custom.sstApp}-ExtLambdaAuthorizerId

  # get:
  #   # Defines an HTTP API endpoint that calls the main function in get.js
  #   # - path: url path is /payments/{id}
  #   # - method: GET request
  #   handler: get.main
  #   events:
  #     - http:
  #         path: payments/{id}
  #         method: get
  #         cors: true
  #         # Lambda authorizer all the way
  #         # authorizer: aws_iam
  #         authorizer: authorizerFunc

  # list:
  #   # Defines an HTTP API endpoint that calls the main function in list.js
  #   # - path: url path is /payments
  #   # - method: GET request
  #   handler: list.main
  #   events:
  #     - http:
  #         path: payments
  #         method: get
  #         cors: true
  #         # Lambda authorizer all the way
  #         # authorizer: aws_iam
  #         authorizer: authorizerFunc

  # update:
  #   # Defines an HTTP API endpoint that calls the main function in update.js
  #   # - path: url path is /payments/{id}
  #   # - method: PUT request
  #   handler: update.main
  #   events:
  #     - http:
  #         path: payments/{id}
  #         method: put
  #         cors: true
  #         # Lambda authorizer all the way
  #         # authorizer: aws_iam
  #         authorizer: authorizerFunc

  # delete:
  #   # Defines an HTTP API endpoint that calls the main function in delete.js
  #   # - path: url path is /payments/{id}
  #   # - method: DELETE request
  #   handler: delete.main
  #   events:
  #     - http:
  #         path: payments/{id}
  #         method: delete
  #         cors: true
  #         # Lambda authorizer all the way
  #         # authorizer: aws_iam
  #         authorizer: authorizerFunc

# resources:

  # - Outputs:
  #     ApiGatewayRestApiId:
  #       Value:
  #       # ApiGatewayRestApi is a ref from serverless framework
  #         Ref: ApiGatewayRestApi
  #       Export:
  #         Name: ${self:custom.sstApp}-ExtApiGatewayRestApiId
    
  #     ApiGatewayRestApiRootResourceId:
  #       Value:
  #          Fn::GetAtt:
  #           - ApiGatewayRestApi
  #           - RootResourceId 
  #       Export:
  #         Name: ${self:custom.sstApp}-ExtApiGatewayRestApiRootResourceId

